{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","classname","temp_min","temp_max","description","Form","onSubmit","loadweather","error","role","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","document","title","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4f61fd7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-warning\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>\r\n          {props.city}\r\n        </h1>\r\n        <h5 className=\"py-4\"> {/*top and bottom padding-y (py)*/}\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i> \r\n        </h5>\r\n        {props.temp_celsius?(\r\n        <h1 classname=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ):null}\r\n        \r\n        {/** show max and min temp **/}\r\n        {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min,max){\r\n  if(min && max){\r\n    return(\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container h-100\">\r\n      <form onSubmit={props.loadweather}>\r\n        <div>{props.error ? error() : null}</div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-warning\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control text-warning\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 mt-2 py-2 text-md-left\">\r\n            <button className=\"btn btn-light\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*const error = props => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country...!\r\n    </div>\r\n  );\r\n};*/\r\n\r\nfunction error(){\r\n  return(\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country...!\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\n\nimport \"./App.css\";\n\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\";\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_key = \"ea221bde9cfda936fcbcc49fe4042322\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    document.title = \"WEATHER APP\";\n    this.state = {\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId){\n    switch (true){\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather = async(e) =>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city&&country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    \n    const response = await api_call.json(); //converting api_call data into json format\n\n    console.log(response);\n\n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      celsius:this.calCelsius(response.main.temp),\n      temp_max:this.calCelsius(response.main.temp_max),\n      temp_min:this.calCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      error:false\n    });\n\n    // seting icons\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    }\n    else{\n      this.setState({error:true});\n    }\n  };\n  \n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather city = {this.state.city} \n        country = {this.state.country} \n        temp_celsius = {this.state.celsius}\n        temp_max = {this.state.temp_max}\n        temp_min = {this.state.temp_min}\n        description = {this.state.description}\n        weatherIcon = {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}